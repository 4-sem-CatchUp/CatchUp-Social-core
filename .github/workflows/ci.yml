name: .NET Core CI (Lint & Unit Tests)

on:
  push:
    branches: ["**"]  # Runs on push to all branches
  pull_request:
    branches: ["**"]  # Runs on all pull requests

jobs:
  lint-and-test:
    name: Linting & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x  # Use the version required by your project

      # Cache NuGet packages (makes workflow faster)
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Restore all dependencies
      - name: Restore dependencies
        run: dotnet restore CatchUp.Social.sln

      # Restore local dotnet tools (e.g. CSharpier)
      - name: Restore dotnet tools
        run: dotnet tool restore

      # Build the solution to catch compilation errors
      - name: Build solution
        run: dotnet build CatchUp.Social.sln --configuration Release

      # Check code formatting with CSharpier
      - name: Check formatting with CSharpier
        run: dotnet csharpier check .

      # Run linting (check code formatting)
      - name: Run linting (dotnet format)
        run: dotnet format --verify-no-changes --severity error

      # Run unit tests with code coverage
      - name: Run unit tests with coverage
        run: |
          dotnet test Social.CoreTests/SocialCoreTests.csproj \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test_results.trx" \
            --verbosity normal
        continue-on-error: true
      
      # Upload test results (.trx)
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/**/*.trx
      
      # Generate code coverage report
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.9
        with:
          reports: 'TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline_AzurePipelines_Dark'
          classfilters: '-Social.Program;-Social.Migrations*'
          filefilters: '-**/Middleware/*'
      
      # Upload HTML coverage report
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport
