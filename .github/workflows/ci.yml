name: .NET Core CI (Lint & Unit Tests)

on:
  push:
    branches: ["**"]  # Kører ved push til alle branches
  pull_request:
    branches: ["**"]  # Kører ved pull requests

jobs:
  lint-and-test:
    name: Linting & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x  # Brug den version, dit projekt kræver

      # Caching af NuGet-pakker (gør workflowen hurtigere)
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Gendanner alle afhængigheder
      - name: Restore dependencies
        run: dotnet restore CatchUp.Social.sln

        
      # Gendanner lokale dotnet tools (fx CSharpier)
      - name: Restore dotnet tools
        run: dotnet tool restore


      # Byg løsningen for at fange kompileringsfejl
      - name: Build solution
        run: dotnet build CatchUp.Social.sln --configuration Release

        
      # Tjek kodeformatering med CSharpier
      - name: Check formatting with CSharpier
        run: dotnet csharpier check .


      # Kører linting (tjekker kodeformatering)
      - name: Run linting (dotnet format)
        run: dotnet format --verify-no-changes --severity error

      # Kører unit tests med NUnit
      - name: Run unit tests
        run: dotnet test Social.CoreTests/SocialCoreTests.csproj --configuration Release --logger "trx;LogFileName=test_results.trx" --verbosity normal
        continue-on-error: true  # Kør videre, selv hvis tests fejler

      # Uploader testresultater (selv hvis tests fejler)
      - name: Upload test results
        if: always()  # Upload uanset om tests kører eller fejler
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: "**/test_results.trx"

      # Run unit tests with code coverage
      - name: Run unit tests with code coverage
        run: |
          dotnet test Social.CoreTests/SocialCoreTests.csproj \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test_results.trx" \
            --verbosity normal

      # Upload code coverage results
      - name: Upload code coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code Coverage
          path: TestResults/**/coverage.cobertura.xml


